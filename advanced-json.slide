Advanced JSON Strategies
25 Jun 2015
Tags: go, golang, json, marshal, unmarshal

Aaron O. Ellis
Lead Developer, Galvanize
aaron.o.ellis@gmail.com
http://aaronoellis.com/
@aaronoellis

* The Goal

Minimize the number and size of custom types while maximizing their utility.

* Why Not interface{}?

The empty interface, and map[string]interface{}, allow you to build reusable and generic components.

But there are better languages if you're going to rely on dynamic code.

* Plain Old Structs

JSON unmarshal is case insensitive by default

.play samples/tagless/tagless.go /BEGIN OMIT/,$

* Tag Options

JSON struct tags have options

.play samples/options/options.go /BEGIN OMIT/,$

* Anonymous Structs

Wrap meaningful structs in anonymous structs to easily discard filler

.play samples/anonymous/anonymous.go /BEGIN OMIT/,$

* Masking with Embedding

Remove a field from JSON output using a "mask"

.play samples/mask/mask.go /BEGIN OMIT/,$

* Splitting with Embedding

When there are multiple responses without overlapping fields

.play samples/split/split.go /BEGIN OMIT/,$

* Warning: Duplicate Fields are Dropped

If two embedded structs share a field (i.e. the JSON field name), the value will not be marshaled into either of them

.play samples/dropped/dropped.go /BEGIN OMIT/,$

* Raw Message

Used to delay marshaling or unmarshaling

.link http://golang.org/pkg/encoding/json/#RawMessage

* Multiple Types in One Array

Use RawMessage to decode an array with multiple types

.play samples/multiple/multiple.go /BEGIN OMIT/,$

* The JSON Interfaces

Any type can implement an interface, not just structs!

    type Marshaler interface {
        MarshalJSON() ([]byte, error)
    }

.link http://golang.org/pkg/encoding/json/#Marshaler

    type Unmarshaler interface {
        UnmarshalJSON([]byte) error
    }

.link http://golang.org/pkg/encoding/json/#Unmarshaler

* Custom Types

Manipulating read and write increases type re-usability

.play samples/once/once.go /BEGIN OMIT/,$

* Default Behavior

Add default behavior and error checking to the implementing methods

.play samples/default/default.go /BEGIN OMIT/,$

* Warning: Embedding Will Promote the Implementation

Structs with embeded implementations will have their default behavior overwritten

.play samples/promoted/promoted.go /BEGIN OMIT/,$

* This talk is on GitHub

.link https://github.com/aodin/go-json-talk
